name: Desktop Bundles

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies (dev + web)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e '.[dev,web]'

      - name: Create bundle project
        run: briefcase create

      - name: Build bundle
        run: briefcase build

      - name: Package (if supported)
        run: |
          echo "Attempting package step"
          briefcase package --adhoc-sign --no-input || echo "Package step not implemented for this platform"

      - name: Prepare release asset (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          set -e
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            # Use PR number if available, else short SHA
            if [ -n "${{ github.event.pull_request.number }}" ]; then
              VERSION="pr-${{ github.event.pull_request.number }}"
            else
              VERSION="sha-${GITHUB_SHA::7}"
            fi
          fi
          APP_DIST_DIR="dist/Pohualli.app"
          APP_BUILD_DIR="build/pohualli/macos/app/Pohualli.app"
          DMG_ORIG=$(ls dist/*.dmg 2>/dev/null | head -n1 || true)
          if [ -n "$DMG_ORIG" ]; then
            DMG_TARGET="dist/Pohualli-${VERSION}-macOS.dmg"
            if [ "$(basename "$DMG_ORIG")" != "$(basename "$DMG_TARGET")" ]; then
              cp "$DMG_ORIG" "$DMG_TARGET"
            fi
          fi
          if [ ! -d "$APP_DIST_DIR" ]; then
            if [ -d "$APP_BUILD_DIR" ]; then
              echo "Copying app bundle from build path ($APP_BUILD_DIR) to dist/";
              mkdir -p dist
              cp -R "$APP_BUILD_DIR" "$APP_DIST_DIR"
            else
              if [ -n "$DMG_ORIG" ]; then
                echo "No .app bundle found but DMG present; skipping zip creation.";
                exit 0
              fi
              echo "Mac app bundle not found at either $APP_DIST_DIR or $APP_BUILD_DIR, and no DMG produced." >&2
              echo "Listing build/pohualli/macos/app for diagnostics (if exists):" >&2
              find build/pohualli/macos -maxdepth 4 -type d || true
              exit 1
            fi
          fi
          (cd dist && zip -r "Pohualli-${VERSION}-macOS.zip" Pohualli.app)

      - name: Prepare release asset (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          set -e
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            if [ -n "${{ github.event.pull_request.number }}" ]; then
              VERSION="pr-${{ github.event.pull_request.number }}"
            else
              VERSION="sha-${GITHUB_SHA::7}"
            fi
          fi
            MSI_ORIG=$(ls dist/*.msi 2>/dev/null | head -n1 || true)
          if [ -n "$MSI_ORIG" ]; then
            cp "$MSI_ORIG" "dist/Pohualli-${VERSION}-windows.msi"
          else
            echo "No MSI found in dist/" >&2
            exit 1
          fi

      - name: List dist contents
        shell: bash
        run: |
          echo "Listing dist directory"; ls -R dist || true

      - name: Upload bundle artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.os }}
          path: |
            dist/Pohualli-*-macOS.zip
            dist/Pohualli-*-macOS.dmg
            dist/Pohualli-*-windows.msi
            dist/Pohualli.app/**
          if-no-files-found: warn

  publish-release-assets:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-desktop
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display downloaded
        run: ls -R artifacts

      - name: Create GitHub Release & upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/Pohualli-*-macOS.zip
            artifacts/**/Pohualli-*-windows.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



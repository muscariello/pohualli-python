name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-publish:
    name: Build & Publish to PyPI
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write  # For trusted publishing (future use)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Validate tag matches pyproject version
        id: validate_version
        run: |
          TAG_REF="${GITHUB_REF##*/}"
          TAG_VERSION="${TAG_REF#v}"
          PY_VERSION=$(python -c "import tomllib, pathlib; print(tomllib.loads(pathlib.Path('pyproject.toml').read_text())['project']['version'])")
          echo "Tag version: $TAG_VERSION"
          echo "pyproject version: $PY_VERSION"
          if [ "$TAG_VERSION" != "$PY_VERSION" ]; then
            echo "::error ::Tag version ($TAG_VERSION) does not match pyproject.toml version ($PY_VERSION)" >&2
            exit 1
          fi
          echo "Version match confirmed."

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build dist (sdist & wheel)
        run: |
          python -m build
          ls -l dist

      - name: Publish to PyPI
        if: success()
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true
          print-hash: true
          attestations: true

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: dist/*

      - name: Summary
        run: |
          echo "Published tag $GITHUB_REF to PyPI (package version from pyproject)." >> $GITHUB_STEP_SUMMARY

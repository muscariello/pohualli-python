name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-publish:
    name: Build & Publish to PyPI
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write  # For trusted publishing (future use)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Validate tag matches pyproject version
        id: validate_version
        run: |
          TAG_REF="${GITHUB_REF##*/}"
          TAG_VERSION="${TAG_REF#v}"
          PY_VERSION=$(python -c "import tomllib, pathlib; print(tomllib.loads(pathlib.Path('pyproject.toml').read_text())['project']['version'])")
          echo "Tag version: $TAG_VERSION"
          echo "pyproject version: $PY_VERSION"
          if [ "$TAG_VERSION" != "$PY_VERSION" ]; then
            echo "::error ::Tag version ($TAG_VERSION) does not match pyproject.toml version ($PY_VERSION)" >&2
            exit 1
          fi
          echo "Version match confirmed."

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build dist (sdist & wheel)
        run: |
          python -m build
          ls -l dist

      - name: Publish to PyPI
        if: success()
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true
          print-hash: true
          attestations: true

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: dist/*

      - name: Summary
        run: |
          echo "Published tag $GITHUB_REF to PyPI (package version from pyproject)." >> $GITHUB_STEP_SUMMARY

  desktop-mac:
    name: Build macOS Desktop Bundle
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-and-publish
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install briefcase & project deps
        run: |
          python -m pip install --upgrade pip
          # dev includes briefcase, web for FastAPI runtime
            python -m pip install -e '.[dev,web]'

      - name: Build macOS app with Briefcase
        run: |
          set -e
          VERSION="${GITHUB_REF_NAME#v}"
          echo "Building macOS app for version $VERSION"
          briefcase create macOS
          briefcase build macOS
          # Briefcase outputs to build/pohualli/macos/app/Pohualli.app (standard template layout)
          APP_BUILD_PATH="build/pohualli/macos/app/Pohualli.app"
          if [ ! -d "$APP_BUILD_PATH" ]; then
            echo "Expected app bundle not found at $APP_BUILD_PATH" >&2
            echo "Tree under build/pohualli:" >&2
            find build/pohualli -maxdepth 5 -type d || true
            exit 1
          fi
          mkdir -p dist
          cp -R "$APP_BUILD_PATH" dist/Pohualli.app
          (cd dist && zip -r "Pohualli-${VERSION}-macOS.zip" Pohualli.app)
          ls -l dist

      - name: Upload macOS bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: dist/Pohualli-*-macOS.zip

      - name: Attach macOS bundle to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/Pohualli-*-macOS.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  desktop-windows:
    name: Build Windows Desktop Bundle
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-and-publish
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install briefcase & project deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e '.[dev,web]'

      - name: Build Windows app with Briefcase
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $version = $env:GITHUB_REF_NAME.Substring(1)
          echo "Building Windows app for version $version"
          briefcase create windows
          briefcase build windows
          briefcase package windows
          if (-not (Test-Path dist)) { New-Item -ItemType Directory -Path dist | Out-Null }
          $msi = Get-ChildItem -Path dist -Filter '*.msi' | Select-Object -First 1
          if (-not $msi) {
            Write-Error 'No MSI produced in dist directory.'
          }
          $desiredName = "Pohualli-$version-windows.msi"
          if ($msi.Name -ne $desiredName) {
            Rename-Item -Path $msi.FullName -NewName $desiredName
          }
          Get-ChildItem dist

      - name: Upload Windows installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: dist/Pohualli-*-windows.msi

      - name: Attach Windows installer to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/Pohualli-*-windows.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
